modules:
  - .docs_list
---
id: interview order
mandatory: True
code: |
  download
---
id: download
event: download
question: |
  Assembly Line Documents List
subquestion: |
  Four ways to make the table.

  All use the same css, which you can see in the `docs_list.py` module. That could be moved to a `css` file if we wanted it to be interview-wide, but putting it here will mean it only affects this page.
  
  TODO: Make css customized for tables created with functions so that it doesn't affect other tables on the page. ("hide-headers" and "no-row-colors" and "docs-table")
  
  **1. One function with complex arguments:**
  
  ${ docs_list([
    { "label": 'Document', "doc": a_document },
    { "label": 'Cover page', "doc": a_cover_page },
    { "label": 'Next steps', "doc": instructions }
  ]) }
  
  Some text under the table.
  
  <br/>
  
  **2. Two functions with simpler arguments:**
  
  <!-- Imagine the first function doesn't need an argument -->
  ${ docs_list_top( 3 ) }
  ${ docs_list_row( 'Document', a_document ) }
  ${ docs_list_row( 'Cover page', a_cover_page ) }
  ${ docs_list_row( 'Next steps', instructions ) }
  
  Some text under the table.
  
  <!-- Consider this model for expansion
  docs_list_top( 4 ) (should be able to create label for each column, otherwise `initialize_table` might be better)
  docs_list_row( 'Document', 'Some other text', a_document )
  -->
  
  <br/>
  
  **3. One template and two functions with simpler arguments. More customizable.**
  
  _The template is needed to hide complexity of spacing. Table formatting is necessary._
  
  &nbsp; | &nbsp; | &nbsp;
  :-|-:|-:
  :file:&nbsp;&nbsp; Document | ${ download_button(a_document) } | ${ view_button(a_document) }
  ${ doc_icon } Cover page | ${ download_button(a_cover_page) } | ${ view_button(a_cover_page) }
  ${ doc_icon } Next steps | ${ download_button(instructions) } | ${ view_button(instructions) }
  
  Some text under the table.
  
  <br/>

  **4. Two templates and four columns. Additional css may be desired:**
  
  &nbsp; | &nbsp; | &nbsp; | &nbsp;
  :-|:-|-:|-:
  :file: | Document | ${ a_document.download_button } | ${ a_document.view_button }
  :file: | Cover page | ${ a_cover_page.download_button } | ${ a_cover_page.view_button }
  :file: | Next steps | ${ instructions.download_button } | ${ instructions.view_button }
  
  Some text under the table.
  
  </br>
  
  **5. No-abstractions table:**
  
  <!-- div class="doc-table" -->
  
  &nbsp; | &nbsp; | &nbsp; | &nbsp;
  :-|:-|-:|-:
  :file: | Document | ${ action_button_html( a_document.pdf.url_for(attachment=True), new_window=False, color="primary", label='Download :file-download:' )} | ${ action_button_html( a_document.pdf.url_for(inline=True), new_window="True", color="primary", label='View <i class="far fa-eye"></i>' )}
  :file: | Cover page | ${ action_button_html( a_cover_page.pdf.url_for(attachment=True), new_window=False, color="primary", label='Download :file-download:' )} | ${ action_button_html( a_cover_page.pdf.url_for(inline=True), new_window="True", color="primary", label='View <i class="far fa-eye"></i>' )}
  :file: | Next steps | ${ action_button_html( instructions.pdf.url_for(attachment=True), new_window=False, color="primary", label='Download :file-download:' )} | ${ action_button_html( instructions.pdf.url_for(inline=True), new_window="True", color="primary", label='View <i class="far fa-eye"></i>' )}
  
  <!-- div -->
  
  Some text under table
  
  </br>
  
  **6. A non-table display method:**
  
  * [ Download the document ](${ a_document.pdf.url_for(attachment=True) }) :file:
  * [ View the document ](${ a_document.pdf.url_for(inline=True) }) <i class="far fa-eye"></i>
  * [ Download the cover pg ](${ a_cover_page.pdf.url_for(attachment=True) }) :file:
  * [ View the cover pg ](${ a_cover_page.pdf.url_for(inline=True) }) <i class="far fa-eye"></i>
  * [ Download the steps ](${ instructions.pdf.url_for(attachment=True) }) :file:
  * [ View the steps ](${ instructions.pdf.url_for(inline=True) }) <i class="far fa-eye"></i>
  
  ---
  
  ---
  
  **Preferences:**
  
  Opt # | 1 | 2 | 3 | 4 | 5 | 6 | xp
  -|-|-|-|-|-|-|-
  **ID** | **opt 1** | **opt 2** | **opt 3** | **opt 4** | **opt 5** | **opt 6** | **xp**
  1 | 1 | 2 | 3 | 4 | 5 | 6 | 6/10
  
  **Simplicity of code as is (5 most simple):**
  
  Opt # | 1 | 2 | 3 | 4 | 5 | 6 | xp
  -|-|-|-|-|-|-|-
  **ID** | **opt 1** | **opt 2** | **opt 3** | **opt 4** | **opt 5** | **opt 6** | **xp/10**
  2 | 6 | 5.5 | 5 | 4.5 | 2.5 | 4 | 7
  3 | 4.75 | 4.5 | 4.25 | 2.5 | 4 | 7
  4 |  |  |  |  |  |  | 
  
  **Simplicity of code for customization (5 most simple):**
  
  Opt # | 1 | 2 | 3 | 4 | 5 | 6 | xp
  -|-|-|-|-|-|-|-
  **ID** | **opt 1** | **opt 2** | **opt 3** | **opt 4** | **opt 5** | **opt 6** | **xp/10**
  2 | 3 depending on code | 2 depending on code (different considerations) 4 previous considerations | 3.5 with comments | 3.5 | 2.5 | 4 | 7
  3 | 3 with comments | 3 with comments (different considerations) 4.5 for just label | 3 without comments | 2.5 | 4 | 7
  4 |  |  |  |  |  |  | 
  
  **Usability of UI (5 is the best):**
  
  Opt # | 1 | 2 | 3 | 4 | 5 | 6 | xp/10
  -|-|-|-|-|-|-|-
  **ID** | **opt 1** | **opt 2** | **opt 3** | **opt 4** | **opt 5** | **opt 6** | **xp/10**
  2 | 4.5 | 4.5 | 4.5 | 4.5 | 4.5 | 1 | 7
  3 | 5 | 5 | 5 | 5 | 5 | 1 | 7
  4 |  |  |  |  |  |  | 
  
  **Feedback:**
  
  1. Prefer encapsulation, taking load out of YAML. Prefer `doc_icon` because fewer options is best at first, but maybe in future do css for that first column (which would be harder to customize, but that's fine).
  2. Think people are used to buttons for downloading and other big actions. If looks like a table, it could look like a link instead of a button. Table: maybe different colors for different buttons. Maybe swap the order of buttons - download on the right-most. Agree with #3. A long list might become confusing. Background color for every other line? Keeping rows distinct? Or less space to the buttons. Agrees icon of paper is confusing if there's not something to differentiate. Nielson/Norman group usability research. Opt 5 code: A lot more syntax to be careful of messing up, adds complexity. Can replace without too much trouble probably. Opt 4: more like 3-4. Need to know where that template is created. Requires to look in a few places to change something. What if didn’t want to change template? Very readable, though. If didn’t have to change it then simplicity 4-5. Clearer to read. Opt 4: prefer doc_icon - easier to read and can adjust spacing elsewhere. Like it as one space. Also find the functions easier to read than attribute notation. Very clear what needs changing. Opt 2: Very simple/easy to change what is changeable. Customizing deeper than labels would potentially be somewhat more hard to chase down. Opt 1: Comfortable with list data structure, know exactly where to change it. Totally changing would be a little easier with just one function to work on.
  3. Also agrees buttons for big actions. Opt 5 - great usability, though black 'doc' icon at start is a bit confusing or unneeded, icons are useful. Code is not as readable. Multi-line. Can find label to edit, color is confusing. Maybe more confusing with people with less experience. Agree with order of buttons (2). Opt 4: Agree with 2. Needs some comment to be able to use this, though, to tell where to find the template to copy. How little code is very readable, but finding to customize would be confusing. If no customization it’s super clear. Opt 5: &nbsp; - fine to have it in the table as opposed to abstracted if you just have one. If you have multiple it’s a harder question. Do like it visually a little closer, like two spaces. The abstraction question is hard, though. Parenthesis make it a little more clear. Impact of lack of flexibility: low impact because probably not a lot of need for customization, but making it your own would be more challenging. Opt 1: Keys help. List may be confusing for other people, but clear/readable. To totally change would be harder, but to just add more rows looks straightforward and I would know exactly what to do. Easy to copy/paste.
  
  TODO: Try without doc icon on left.
  
css: |
 ${ docs_list_css() }
---
generic object: DAFileCollection
template: x.download_button
content: |
  ${ action_button_html(
    x.pdf.url_for(attachment=True),
    new_window=False, color="primary",

    label='Download :file-download:'
  )}
---
generic object: DAFileCollection
template: x.view_button
content: |
  ${ action_button_html(
    x.pdf.url_for(inline=True),
    new_window="True", color="primary",

    label='View <i class="far fa-eye"></i>'
  )}
---
template: doc_icon
content: |
  :file:&nbsp;&nbsp;
---
attachment:
  - name: Information Sheet
    variable name: a_document
    filename: document
    content: |
      This is a document
---
attachment:
  - name: Information Sheet
    variable name: a_cover_page
    filename: cover_page
    content: |
      This is a cover page
---
attachment:
  - name: Next Steps
    variable name: instructions
    filename: next_steps
    content: |
      These are the follow-up instructions
